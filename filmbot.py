import telebot
from telebot import types

TOKEN = ''
bot = telebot.TeleBot(TOKEN)

# Define the channel IDs
channel_id1 = -1001707086519  # Replace with the ID of your first channel
channel_id2 = -1001962601108  # Replace with the ID of your second channel

# Track users who clicked "Confirm" button
confirmed_users = set()

@bot.message_handler(commands=['start'])
def start(message):
    markup = types.InlineKeyboardMarkup(row_width=1)
    button = types.InlineKeyboardButton("üîé –ù–∞–π—Ç–∏ —Ñ–∏–ª—å–º", callback_data='find_movie')
    markup.add(button)
    bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç, {0.first_name}!'.format(message.from_user), reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == 'find_movie')
def handle_callback(call):
    if call.data == 'find_movie':
        user_id = call.message.chat.id
        send_subscription_check(user_id)

def send_subscription_check(chat_id):
    subscribed_channel1 = check_subscription(chat_id, channel_id1)
    subscribed_channel2 = check_subscription(chat_id, channel_id2)
    if subscribed_channel1 and subscribed_channel2:
        send_message_after_subscription_check(chat_id)
    else:
        markup = types.InlineKeyboardMarkup(row_width=2)  # Set row_width to 2 for two columns
        sponsor1_button = types.InlineKeyboardButton("–°–ø–æ–Ω—Å–æ—Ä ‚Ññ1", url='https://t.me/WbTreasures41')
        sponsor2_button = types.InlineKeyboardButton("–°–ø–æ–Ω—Å–æ—Ä ‚Ññ2", url='https://t.me/CoinTraderPro15')
        confirm_button = types.InlineKeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data='confirm')
        markup.add(sponsor1_button, sponsor2_button)
        markup.add(confirm_button)  # Add the confirm button in a separate row
        bot.send_message(chat_id, "–°–Ω–∞—á–∞–ª–∞ –≤–∞–º –Ω—É–∂–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –æ–±–∞ –∫–∞–Ω–∞–ª–∞", reply_markup=markup)


def send_message_after_subscription_check(chat_id):
    markup = types.InlineKeyboardMarkup(row_width=2)  # Set row_width to 2 for two columns
    sponsor1_button = types.InlineKeyboardButton("–°–ø–æ–Ω—Å–æ—Ä ‚Ññ1", url='https://t.me/WbTreasures41')
    sponsor2_button = types.InlineKeyboardButton("–°–ø–æ–Ω—Å–æ—Ä ‚Ññ2", url='https://t.me/CoinTraderPro15')
    confirm_button = types.InlineKeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å‚úÖ", callback_data='confirm')
    markup.add(sponsor1_button, sponsor2_button)
    markup.add(confirm_button)  # Add the confirm button in a separate row
    bot.send_message(chat_id, "–ü—Ä–µ–∂–¥–µ —á–µ–º –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à–∏—Ö —Å–ø–æ–Ω—Å–æ—Ä–æ–≤ –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É \"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å‚úÖ\", —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == 'confirm')
def handle_confirm_callback(call):
    user_id = call.message.chat.id
    confirmed_users.add(user_id)
    bot.answer_callback_query(call.id, "–í—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ —Å–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫–∏...")
    subscribed_channel1 = check_subscription(user_id, channel_id1)
    subscribed_channel2 = check_subscription(user_id, channel_id2)
    if subscribed_channel1 and subscribed_channel2:
        bot.send_message(user_id, "–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å! \n–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ —Ñ–∏–ª—å–º–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: 123")
    else:
        bot.send_message(user_id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ —Å–ø–æ–Ω—Å–æ—Ä–æ–≤, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

@bot.message_handler(func=lambda message: message.text.isdigit() and len(message.text) == 3)
def handle_code_message(message):
    user_id = message.chat.id
    if user_id in confirmed_users:
        code = message.text
        if code == '001':
            with open('fix.py', 'rb') as f:
                bot.send_document(user_id, f, caption="–§–∞–π–ª –¥–ª—è –∫–æ–¥–∞: {}".format(code))
        else:
            bot.send_message(user_id, "–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    else:
        bot.send_message(user_id, "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–Ω–∞—á–∞–ª–∞ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ –∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ç—Ä–µ–±—É–µ–º—ã–µ –¥–µ–π—Å—Ç–≤–∏—è.")	



# Function to check user's subscription to channels
def check_subscription(user_id, channel_id):
    try:
        chat_member = bot.get_chat_member(channel_id, user_id)  # Check if the user is a member of the channel
        return chat_member.status == 'member' or chat_member.status == 'creator'
    except telebot.apihelper.ApiException:
        return False


bot.polling()